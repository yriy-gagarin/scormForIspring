var a = class e {
  static log(r, ...o) {
    console.log(r, ...o)
  }

  static warn(r, ...o) {
    console.warn(r, ...o)
  }

  static error(r, ...o) {
    console.error(r, ...o)
  }

  static assert(r, o) {
    r || e.error("Assertion failed" + (o ? ": " + o : ""))
  }
};

function f(e, r) {
  return a.assert(e, r), e
}

function l(e) {
  return e !== void 0
}

function rr(e) {
  let r = typeof e;
  return r == "object" && e != null || r == "function"
}

function G(e) {
  return typeof e == "function"
}

function $(e) {
  return e === null
}

function or(e, r, o) {
  return function (...t) {
    o && o(...t);
    let n = e(...t);
    return r(this, n, ...t), n
  }
}

var g = Function("return this")(), Cr = () => !0;

function A(e, r) {
  if (Cr()) {
    if (r) {
      a.error(e);
      return
    }
    a.warn(e)
  }
}

function Q(e, r) {
  let o = e.stack || e.toString();
  String(o).indexOf(e.message) < 0 && A(e.message, r), A(o, r)
}

var Er = Object.getPrototypeOf({});

function q(e) {
  e && (f(!e.disposed), !1 && setTimeout(() => {
    let r = e.owner ? e.owner.constructor.name : null, o = e.owner ? e.ownerPropertyName() : null;
    if (e.owner = null, e.ownerPropertyName = null, e instanceof h) {
      let p = r ? `[${r}].${o} have active signals` : void 0;
      f(e.handlersCount() == 0, p)
    }
    let t = e, n = new Set;
    for (; (t = f(Object.getPrototypeOf(t))) != Er;) Object.getOwnPropertyNames(t).forEach(p => {
      p != "constructor" && n.add(p)
    });
    n.forEach(p => {
      G(e[p]) && (e[p] = or(e[p].bind(e), () => {
        A(`using method ${p} from disposed object ${e.constructor.name}`, !0)
      }))
    })
  }, 100), G(e.dispose) && e.dispose(), e.disposed = !0)
}

function er(e, r) {
  let o = e.split("."), t = g;
  !(o[0] in t) && typeof t.execScript != "undefined" && t.execScript("var " + o[0]);
  for (let n; o.length && (n = o.shift());) !o.length && l(r) ? t[n] = r : t[n] && t[n] !== Object.prototype[n] ? t = t[n] : t = t[n] = {}
}

!1 || (g.onerror = function (...e) {
  let [r, , , , o] = e;
  return o ? Q(o, !0) : A(r, !0), !0
});
var Lr = 0, T = class {
  constructor(r, o, t, n, p = null) {
    this.listener = r, this.src = o, this.type = t, this.capture = !!n, this.handler = p, this.key = ++Lr
  }
};
var O = class extends T {
  constructor(r, o, t, n, p, s) {
    super(r, t, n, p, s), this.proxy = o, this.callOnce = !1, this.removed = !1
  }

  markAsRemoved() {
    this.removed = !0, this.listener = null, this.proxy = null, this.src = null, this.handler = null
  }
};

function tr(e, r, o) {
  for (let t in e) if (r.call(o, e[t], t, e)) return !0;
  return !1
}

function nr(e, r, o) {
  if (e) {
    for (let t in e) if (r.call(o, e[t], t, e)) return t
  }
}

function pr(e, r) {
  for (let o in e) if (!(o in r) || e[o] !== r[o]) return !1;
  for (let o in r) if (!(o in e)) return !1;
  return !0
}

function sr(e, r, o) {
  let t = {};
  if (e) for (let n in e) r.call(o, e[n], n, e) && (t[n] = e[n]);
  return t
}

var y = class {
  constructor(r) {
    this.src = r, this.listeners = {}, this._typeCount = 0
  }

  getTypeCount() {
    return this._typeCount
  }

  getListenerCount() {
    let r = 0;
    for (let o of Object.keys(this.listeners)) r += this.listeners[o].length;
    return r
  }

  add(r, o, t, n, p) {
    let s = r.toString(), m = this.listeners[s];
    m || (m = this.listeners[s] = [], this._typeCount++);
    let i, x = this._findListenerIndex(m, o, n, p);
    return x > -1 ? (i = m[x], t || (i.callOnce = !1)) : (i = new O(o, null, this.src, s, !!n, p), i.callOnce = t, m.push(i)), i
  }

  remove(r, o, t, n) {
    let p = r.toString();
    if (!(p in this.listeners)) return !1;
    let s = this.listeners[p], m = this._findListenerIndex(s, o, t, n);
    return m > -1 ? (s[m].markAsRemoved(), s.splice(m, 1), s.length == 0 && (delete this.listeners[p], this._typeCount--), !0) : !1
  }

  removeByKey(r) {
    let o = r.type;
    if (!(o in this.listeners)) return !1;
    let t = this.listeners[o], n = t.indexOf(r), p = n >= 0;
    return p && (t.splice(n, 1), r.markAsRemoved(), this.listeners[o].length == 0 && (delete this.listeners[o], --this._typeCount)), p
  }

  getListeners(r, o) {
    let t = this.listeners[r.toString()], n = [];
    if (t) for (let p = 0; p < t.length; ++p) {
      let s = t[p];
      s.capture == o && n.push(s)
    }
    return n
  }

  getListener(r, o, t, n) {
    let p = this.listeners[r.toString()], s = -1;
    return p && (s = this._findListenerIndex(p, o, t, n)), s > -1 ? p[s] : null
  }

  hasListener(r = "", o) {
    let t = l(r), n = t ? r.toString() : "", p = l(o);
    return tr(this.listeners, s => {
      for (let m = 0; m < s.length; ++m) if ((!t || s[m].type == n) && (!p || s[m].capture == o)) return !0;
      return !1
    })
  }

  _findListenerIndex(r, o, t, n) {
    for (let p = 0; p < r.length; ++p) {
      let s = r[p];
      if (!s.removed && s.listener == o && s.capture == !!t && s.handler == n) return p
    }
    return -1
  }
};
var Y = "ispring_lm_" + (Math.random() * 1e6 | 0), J;

function Ar() {
  if (!g.addEventListener || !Object.defineProperty) return !1;
  let e = !1, r = Object.defineProperty({}, "passive", {
    get: function () {
      e = !0
    }
  });
  return g.addEventListener("test", Function.prototype, r), g.removeEventListener("test", Function.prototype, r), e
}

function vr() {
  return l(J) || (J = Ar()), J
}

function X(e) {
  let r = e[Y];
  return r instanceof y ? r : null
}

function _(e) {
  let r = e;
  if (!r || r.removed) return !1;
  let o = r.src, t = r.type, n = r.proxy;
  o.removeEventListener && o.removeEventListener(t, n, r.capture);
  let p = X(o);
  return p ? (p.removeByKey(r), p.getTypeCount() == 0 && (o[Y] = null)) : r.markAsRemoved(), !0
}

function Tr(e) {
  let {listener: r, handler: o, callOnce: t} = e, n = o ? r.bind(o) : r;
  return t ? (...p) => {
    n(...p), _(e)
  } : n
}

function P(e, r, o, t, n = null) {
  let p = rr(t) ? f(t).capture : !!t, s = X(e);
  s || (s = new y(e), e[Y] = s);
  let m = !!(t && t.once), i = s.add(r, o, m, p, n);
  if (i.proxy) return i;
  let x = Tr(i);
  if (i.proxy = x, e.addEventListener) {
    let W = vr() ? t : p;
    l(W) || (W = !1), e.addEventListener(r.toString(), x, W)
  } else throw new Error("addEventListener is unavailable.");
  return i
}

function ir(e, r, o, t, n) {
  t = !!t;
  let p = X(e);
  return p ? p.getListener(r, o, t, n) : null
}

var w = class {
  dispose() {
  }
};
var Or = 0, I = class extends w {
  constructor() {
    super(), this._listenersKeys = null, this._activeSignals = null, this._disposables = null, this._customDestructHandlers = null
  }

  addDestructHandler(r) {
    this._customDestructHandlers = this._customDestructHandlers || [], this._customDestructHandlers.push(r)
  }

  dispose() {
    if (this._destruct(), this._customDestructHandlers) for (let r of this._customDestructHandlers) r();
    if (this._disposables) for (let r of this._disposables) q(r);
    if (this._listenersKeys) {
      for (let r of this._listenersKeys) _(r);
      this._listenersKeys = null
    }
    if (this._activeSignals) for (let r of Object.keys(this._activeSignals)) this._removeSignalByKey(r)
  }

  _listen(r, o, t, n) {
    this._listenersKeys = this._listenersKeys || [];
    let p = P(this._getEventTarget(r), o, t, n, this);
    return this._listenersKeys.push(p), p
  }

  _unlisten(r, o, t) {
    let n = ir(this._getEventTarget(r), o, t, !1);
    return !!n && this._unlistenByKey(n)
  }

  _unlistenByKey(r) {
    let o = f(this._listenersKeys), t = o.indexOf(r);
    return t >= 0 && o.splice(t, 1), _(r)
  }

  _addSignal(r, o, t) {
    this._activeSignals = this._activeSignals || {}, r.add(o, this, t);
    let n = ++Or;
    return this._activeSignals[n] = {dispatcher: r, fn: o, priority: t}, n
  }

  _addSignalCallOnce(r, o, t) {
    let n = (...p) => {
      o.apply(this, p), this._removeSignal(r, n, t)
    };
    this._addSignal(r, n, t)
  }

  _removeSignal(r, o, t) {
    let n = nr(this._activeSignals, p => pr(p, {dispatcher: r, fn: o, priority: t}));
    n ? this._removeSignalByKey(n) : !1 && a.warn("unknown signal")
  }

  _removeSignalByKey(r) {
    if (!(this._activeSignals && this._activeSignals[r])) {
      a.warn("unknown signal key");
      return
    }
    let {dispatcher: o, fn: t, priority: n} = this._activeSignals[r];
    o.remove(t, this, n), delete this._activeSignals[r]
  }

  _removeAllEvents(r) {
    if (r) {
      if (this._activeSignals) {
        let o = sr(this._activeSignals, t => t.dispatcher.eventOwner() == r);
        for (let t of Object.keys(o)) this._removeSignalByKey(t)
      }
      if (this._listenersKeys) {
        let o = this._getEventTarget(r), t = this._listenersKeys.filter(n => n.src == o);
        for (let n of t) this._unlistenByKey(n)
      }
    }
  }

  _name() {
    let r = this, o = r.owner, t = `[${this.constructor.name}]`;
    return o && (t += ` in [${o.constructor.name}].${r.ownerPropertyName()}`), t
  }

  _addDisposable(r) {
    if (this._disposables = this._disposables || [], !r || this._disposables.includes(r)) return r;
    if (!1) {
      let o = r;
      f(this._disposables.indexOf(r) < 0), f(!o.owner), o.owner = this, o.ownerPropertyName = () => {
        let t = this;
        for (let n of Object.keys(t)) if (t[n] == o) return n;
        return "unknown"
      }
    }
    return this._disposables.push(r), r
  }

  _removeDisposable(...r) {
    if (this._disposables) {
      for (let o of r) if (o) {
        this._cleanItemDependencies(o);
        let t = this._disposables.indexOf(o);
        t >= 0 && (this._disposables.splice(t, 1), q(o))
      }
    }
  }

  _cleanItemDependencies(r) {
    this._removeAllEvents(r)
  }

  _cleanDependencies(...r) {
    for (let o of r) o && this._cleanItemDependencies(o)
  }

  _getEventTarget(r) {
    return r
  }

  _destruct() {
  }
};

function wr(e, r) {
  return e > r ? 1 : e < r ? -1 : 0
}

function mr(e, r) {
  if (!e) return !1;
  let o = e.indexOf(r), t = o >= 0;
  return t && e.splice(o, 1), t
}

function Ir(e, r, o, t, n) {
  let p = 0, s = e.length, m;
  for (; p < s;) {
    let i = p + s >> 1, x;
    o ? x = r.call(n, e[i], i, e) : x = r(t, e[i]), x > 0 ? p = i + 1 : (s = i, m = !x)
  }
  return m ? p : ~p
}

function br(e, r, o = wr) {
  return Ir(e, o, !1, r)
}

function fr(e, r, o) {
  let t = br(e, r, o);
  return t < 0 ? (e.splice(-(t + 1), 0, r), !0) : !1
}

var b = class {
  constructor() {
    this._priorities = null, this._values = null, this._zeroPriorityValues = null
  }

  push(r, o) {
    this._addPriority(o);
    let t = this._getPriorityValues(o);
    t ? t.push(r) : a.warn("Priority array values are zero")
  }

  remove(r, o) {
    let t = this._getPriorityValues(o);
    t && mr(t, r)
  }

  removeAt(r, o) {
    let t = this._getPriorityValues(o);
    t && t.splice(r, 1)
  }

  getValuesWithPriority(r) {
    if (r == 0) return this._zeroPriorityValues || [];
    if (!this._values) return a.warn("Priority array values are zero"), [];
    if (!(r in this._values)) return [];
    let o = this._getPriorityValues(r);
    return o || (a.warn("Priority array values are zero"), [])
  }

  getAllValues() {
    if (!this._values) return this._zeroPriorityValues ? this._zeroPriorityValues.slice() : [];
    let r = [], o = f(this._priorities);
    for (let t = 0; t < o.length; ++t) {
      let n = o[t], p = this._getPriorityValues(n);
      p && r.push(...p)
    }
    return r
  }

  _addPriority(r) {
    if (r == 0) {
      this._zeroPriorityValues = this._zeroPriorityValues || [];
      return
    }
    this._priorities = this._priorities || [0], this._values = this._values || {}, r in this._values || (this._values[r] = [], fr(this._priorities, r))
  }

  _getPriorityValues(r) {
    return r == 0 ? this._zeroPriorityValues : f(this._values)[r]
  }
};
var h = class extends I {
  constructor(r = null) {
    super(), this._handlers = null, this._owner = r
  }

  eventOwner() {
    return this._owner
  }

  add(r, o, t = 0) {
    this._handlers = this._handlers || new b, this._handlers.push({fn: r, context: o}, t)
  }

  addCallOnce(r, o, t = 0) {
    let n = p => {
      r.call(o, p), this.remove(n, o, t)
    };
    this.add(n, o, t)
  }

  remove(r, o, t = 0) {
    if (!this._handlers) {
      a.warn("Signal has no handlers!");
      return
    }
    let n = this._handlers.getValuesWithPriority(t), p = n.length;
    for (let s = 0; s < p; ++s) {
      let m = n[s];
      if (m.fn == r && m.context == o) {
        this._handlers.removeAt(s, t);
        break
      }
    }
  }

  has(r, o, t = 0) {
    if (!this._handlers) return !1;
    let n = this._handlers.getValuesWithPriority(t), p = n.length;
    for (let s = 0; s < p; ++s) {
      let m = n[s];
      if (m.fn == r && m.context == o) return !0
    }
    return !1
  }

  dispatch(r) {
    if (!this._handlers) return;
    let o = this._handlers.getAllValues(), t = o.length;
    for (let n = 0; n < t; ++n) {
      let p = o[n];
      if (this._handlers.getAllValues().indexOf(p) != -1) if (!1) p.fn.apply(p.context, [r]); else try {
        p.fn.apply(p.context, [r])
      } catch (s) {
        Q(s, !0)
      }
    }
  }

  toFn() {
    return r => this.dispatch(r)
  }

  handlersCount() {
    return this._handlers ? this._handlers.getAllValues().length : 0
  }
};

function D(e, r, o = !0) {
  if (o) return parseFloat(e.toFixed(r)) + "";
  let t = Math.pow(10, r);
  return Math.floor(e * t) / t + ""
}

var Z = {
  CLICK: "click",
  MOUSEDOWN: "mousedown",
  MOUSEUP: "mouseup",
  MOUSEENTER: "mouseenter",
  MOUSELEAVE: "mouseleave",
  MOUSEOVER: "mouseover",
  MOUSEOUT: "mouseout",
  MOUSEMOVE: "mousemove",
  CHANGE: "change",
  SELECTION_CHANGE: "selectionchange",
  INPUT: "input",
  TEXT_INPUT: "textInput",
  KEY_DOWN: "keydown",
  KEY_PRESS: "keypress",
  PASTE: "paste",
  CUT: "cut",
  COPY: "copy",
  BLUR: "blur",
  FOCUS: "focus",
  FOCUS_IN: "focusin",
  FOCUS_OUT: "focusout",
  LOAD: "load",
  LOAD_END: "loadend",
  LOADED_METADATA: "loadedmetadata",
  UNLOAD: "unload",
  BEFOREUNLOAD: "beforeunload",
  ERROR: "error",
  DRAG_START: "dragstart",
  DRAG_OVER: "dragover",
  DRAG_END: "dragend",
  DRAG_ENTER: "dragenter",
  DRAG_LEAVE: "dragleave",
  DROP: "drop",
  RESIZE: "resize",
  SCROLL: "scroll",
  COMPOSITIONSTART: "compositionstart",
  COMPOSITIONUPDATE: "compositionupdate",
  COMPOSITIONEND: "compositionend",
  ORIENTATIONCHANGE: "orientationchange",
  CUSTOM_CONNECTED: "connected",
  CUSTOM_DISCONNECTED: "disconnected",
  TRANSITIONEND: "transitionend",
  TOUCHSTART: "touchstart",
  VISIBILITYCHANGE: "visibilitychange"
};
var R = class {
  constructor(r) {
    this._options = r
  }

  usePassedStatus(r) {
    return !!(this._options & (r ? 2 : 1))
  }
};

function xr(e) {
  let r = Math.floor(e / 3600), o = Math.floor(e % 3600 / 60), t = Math.floor(e % 60), n = e - Math.floor(e);
  return {h: r, m: o, s: t, ms: n}
}

function j(e) {
  return e < 10 ? "0" + e : e
}

function M(e) {
  let r = xr(e);
  return "PT" + r.h + "H" + r.m + "M" + r.s + "S"
}

function E(e) {
  let r = xr(e);
  return j(r.h) + ":" + j(r.m) + ":" + j(r.s)
}

function C(e) {
  return e < 10 ? "0" + e : e
}

function cr(e) {
  return typeof e == "number" && (e = new Date(e)), e.getUTCFullYear() + "-" + C(e.getUTCMonth() + 1) + "-" + C(e.getUTCDate()) + "T" + C(e.getUTCHours()) + ":" + C(e.getUTCMinutes()) + ":" + C(e.getUTCSeconds()) + ".0Z"
}

function lr(e) {
  let r = document.createElement("a");
  r.href = "goodbye.html", r.click()
}

function u() {
  try {
    window == window.top ? (window.open("", "_self", ""), window.close()) : lr(window)
  } catch {
    lr(f(window.top))
  }
}

function ur(e) {
  return e.trim().replace(/[^\w-]/g, "_")
}

var Rr = {
  id: "id",
  type: "type",
  score: "weighting",
  correctResponse: "correct_responses.%INDEX%.pattern",
  userResponse: "student_response",
  result: "result",
  duration: "latency",
  visitTime: "time"
}, Mr = {
  id: "id",
  type: "type",
  score: "weighting",
  correctResponse: "correct_responses.%INDEX%.pattern",
  userResponse: "learner_response",
  description: "description",
  result: "result",
  duration: "latency",
  visitTime: "timestamp"
}, Ur = {};

function dr(e) {
  return "cmi.interactions." + e + "."
}

function hr(e) {
  return parseInt(e.getValue("cmi.interactions._count"), 10)
}

function gr(e, r, o, t, n) {
  if (n) {
    let i = e.id + "_" + e.description, x = ur(i.substr(0, 255));
    o.setValue(r + t.id, x)
  } else o.setValue(r + t.id, e.id);
  o.setValue(r + t.type, e.type), o.setValue(r + t.score, e.score);
  let p = e.correctResponses || [];
  for (let i = 0; i < p.length; ++i) {
    let x = t.correctResponse.replace("%INDEX%", String(i));
    o.setValue(r + x, p[i])
  }
  let s = e.userResponse;
  s != null && o.setValue(r + t.userResponse, s);

  function m(i) {
    return n && i === "incorrect" ? "wrong" : i
  }

  o.setValue(r + t.result, m(e.result))
}

function _r(e, r) {
  let o = Ur, t = e.id, n = -1;
  if (e.id in o ? n = o[t] : (n = hr(r), o[t] = n), n < 0) return;
  let p = dr(n), s = Rr;
  gr(e, p, r, s, !0);
  let m = e.duration;
  m != null && r.setValue(p + s.duration, E(m / 1e3));
  let i = e.visitTime;
  if (i != null) {
    let x = i.getHours() * 3600 + i.getMinutes() * 60 + i.getSeconds();
    r.setValue(p + s.visitTime, E(x))
  }
}

function Sr(e, r) {
  let o = hr(r);
  if (o < 0) return;
  let t = dr(o), n = Mr;
  gr(e, t, r, n, !1), r.setValue(t + n.description, e.description);
  let p = e.duration;
  p != null && r.setValue(t + n.duration, M(p / 1e3));
  let s = e.visitTime;
  s != null && r.setValue(t + n.visitTime, cr(s))
}

var U = {NORMAL: "normal", BROWSE: "browse", REVIEW: "review"};

function yr(e, r) {
  try {
    for (let t = 0; t < 255; ++t) {
      if (e[r]) return e[r];
      let n = e.parent;
      if (!n || e == n) break;
      e = n
    }
  } catch {
  }
  return null
}

function V(e, r) {
  return yr(e, r) || e.opener && yr(e.opener, r)
}

var F = class e {
  constructor(r, o) {
    this._api = r, this._passed = !1, this._commitsCount = 0, this._suspendEnabled = o
  }

  static create(r) {
    let o = V(window, "API");
    return o ? new e(o, r) : null
  }

  initialize() {
    try {
      return this._toBool(this._api.LMSInitialize(""))
    } catch {
    }
    return !1
  }

  terminate(r) {
    this.setValue("cmi.core.exit", r ? this._getSuspendState() : ""), this.commit();
    try {
      return this._toBool(this._api.LMSFinish(""))
    } catch {
    }
    return !1
  }

  _getSuspendState() {
    return this._passed ? "" : "suspend"
  }

  commit() {
    this._commitsCount == 0 && this.setValue("cmi.core.exit", this._suspendEnabled ? this._getSuspendState() : "");
    try {
      let r = this._toBool(this._api.LMSCommit(""));
      return this._commitsCount += 1, r
    } catch {
    }
    return !1
  }

  setPassed(r) {
    this._passed = r
  }

  getValue(r) {
    try {
      return this._api.LMSGetValue(r)
    } catch {
    }
    return ""
  }

  setValue(r, o) {
    typeof o == "number" && (o = D(Number(o), 2) + "");
    try {
      return this._toBool(this._api.LMSSetValue(r, o))
    } catch {
    }
    return !1
  }

  _toBool(r) {
    return r == "true"
  }
};
var N = class {
  constructor(r) {
    this._base = F.create(r), this._initialized = !1
  }

  initialize() {
    return this._initialized ? !0 : (this._initialized = this._base ? this._base.initialize() : !1, this._initialized)
  }

  initializeAsync(r, o) {
    if (this._initialized) {
      r();
      return
    }
    this._base ? (this._initialized = this._base.initialize(), this._initialized ? r() : o()) : (this._initialized = !1, o())
  }

  terminate(r) {
    return this._base ? this._base.terminate(r) : !1
  }

  commit() {
    return this._base ? this._base.commit() : !1
  }

  getValue(r) {
    return this._base ? this._base.getValue(r) : ""
  }

  setValue(r, o) {
    return this._base ? this._base.setValue(r, o) : !1
  }

  setScore(r, o, t, n) {
    this.setValue("cmi.core.score.raw", r), this.setValue("cmi.core.score.min", o), this.setValue("cmi.core.score.max", t)
  }

  setProgress(r) {
  }

  setSessionTime(r) {
    this.setValue("cmi.core.session_time", E(r / 1e3))
  }

  getSuspendedData() {
    return this.getValue("cmi.suspend_data")
  }

  getLaunchMode() {
    return U.NORMAL
  }

  setSuspendedData(r) {
    this.setValue("cmi.suspend_data", r)
  }

  setStatus(r, o) {
    $(r) ? $(o) ? this.setValue("cmi.core.lesson_status", "unknown") : this.setValue("cmi.core.lesson_status", o ? "completed" : "incomplete") : this.setValue("cmi.core.lesson_status", r ? "passed" : "failed")
  }

  setPassed(r) {
    f(this._base).setPassed(r)
  }

  addInteraction(r) {
    _r(r, this)
  }

  getUserInfo() {
    return {id: this.getValue("cmi.core.student_id"), name: this.getValue("cmi.core.student_name"), email: ""}
  }
};
var B = {SECOND: "2", THIRD: "3", FOURTH: "4"};
var k = class e {
  constructor(r, o, t) {
    this._api = r, this._edition = o, this._passed = !1, this._commitsCount = 0, this._suspendEnabled = t
  }

  static create(r, o) {
    let t = V(window, "API_1484_11");
    return t ? new e(t, r, o) : null
  }

  initialize() {
    try {
      return this._toBool(this._api.Initialize(""))
    } catch {
    }
    return !1
  }

  terminate(r) {
    this.setValue("cmi.exit", r ? this._getSuspendState() : "normal"), this.setValue("adl.nav.request", "exitAll"), this.commit();
    try {
      return this._toBool(this._api.Terminate(""))
    } catch {
    }
    return !1
  }

  _getSuspendState() {
    return this._passed ? "" : "suspend"
  }

  commit() {
    this._commitsCount == 0 && this.setValue("cmi.exit", this._suspendEnabled ? this._getSuspendState() : "normal");
    try {
      let r = this._toBool(this._api.Commit(""));
      return this._commitsCount += 1, r
    } catch {
    }
    return !1
  }

  getValue(r) {
    try {
      return this._api.GetValue(r)
    } catch {
    }
    return ""
  }

  setValue(r, o) {
    typeof o == "number" && (o = D(o, 7));
    try {
      return this._toBool(this._api.SetValue(r, o))
    } catch {
    }
    return !1
  }

  setPassed(r) {
    this._passed = r
  }

  getSuspendDataLimit() {
    return this._edition == B.SECOND ? 4e3 : 64e3
  }

  _toBool(r) {
    return r == "true"
  }
};
var z = class {
  constructor(r, o) {
    this._base = k.create(r, o), this._initialized = !1
  }

  initialize() {
    return this._initialized ? !0 : (this._initialized = this._base ? this._base.initialize() : !1, this._initialized)
  }

  initializeAsync(r, o) {
    if (this._initialized) {
      r();
      return
    }
    this._base ? (this._initialized = this._base.initialize(), this._initialized ? r() : o()) : (this._initialized = !1, o())
  }

  terminate(r) {
    return this._base ? this._base.terminate(r) : !1
  }

  commit() {
    return this._base ? this._base.commit() : !1
  }

  getValue(r) {
    return this._base ? this._base.getValue(r) : ""
  }

  setValue(r, o) {
    return this._base ? this._base.setValue(r, o) : !1
  }

  setScore(r, o, t, n = 0) {
    this.setValue("cmi.score.raw", r), this.setValue("cmi.score.min", o), this.setValue("cmi.score.max", t), this.setValue("cmi.score.scaled", n)
  }

  setProgress(r) {
    this.setValue("cmi.progress_measure", r)
  }

  setSessionTime(r) {
    this.setValue("cmi.session_time", M(r / 1e3))
  }

  getSuspendedData() {
    return this.getValue("cmi.suspend_data")
  }

  setSuspendedData(r) {
    if (!this._base) throw new Error;
    let o = this._base.getSuspendDataLimit();
    r.length <= o && this.setValue("cmi.suspend_data", r)
  }

  getLaunchMode() {
    return this._base ? this._base.getValue("cmi.mode") : U.NORMAL
  }

  setStatus(r, o) {
    let t = (n, p, s, m) => n === null ? p : n ? s : m;
    this.setValue("cmi.success_status", t(r, "unknown", "passed", "failed")), this.setValue("cmi.completion_status", t(o, "unknown", "completed", "incomplete"))
  }

  setPassed(r) {
    this._base && this._base.setPassed(r)
  }

  addInteraction(r) {
    Sr(r, this)
  }

  getUserInfo() {
    return {id: this.getValue("cmi.learner_id"), name: this.getValue("cmi.learner_name"), email: ""}
  }
};

function Pr() {
  return {onSessionStart: new h, onSessionEnd: new h}
}

var d = class {
  constructor(r, o) {
    this._apiVersion = r, this._config = o, this._active = !1, this._playerApi = null, this._suspendEnabled = !0, this._startTime = 0, this._lmsApi = null, this._closeEventKeys = [], this._introCompleted = !1, this._chaptersCompletionStatuses = [], this._longreadResult = null, this._longreadGraded = !1, this._sessionStateNotifier = Pr()
  }

  initializeLms(r) {
    try {
      let o = new R(this._config.flags);
      this._lmsApi = this._createLmsApi(this._apiVersion, o, this._suspendEnabled)
    } catch (o) {
      a.error(o), this._onLmsApiInitializationFailed(r)
    }
    this._lmsApi && this._lmsApi.initialize(this._onLmsApiInitialized.bind(this, r), this._onLmsApiInitializationFailed.bind(this, r))
  }

  _createLmsApi(r, o, t) {
  }

  _onLmsApiInitialized(r) {
    let t = f(this._lmsApi).getSuspendData();
    r(t || void 0).then(p => this._start(p)), this._closeEventKeys = [P(window, Z.UNLOAD, () => this._closeLms()), P(window, Z.BEFOREUNLOAD, () => this._closeLms())]
  }

  _onLmsApiInitializationFailed(r) {
    a.error("Lms initialization failed"), r().then(() => {
    })
  }

  _start(r) {
    this._playerApi = r, this._active = !0, this._startTime = Date.now(), this._sessionStateNotifier.onSessionStart.dispatch(r.getTitle()), r.onClosePlayerRequest.add(() => {
      this._closeLms(), u()
    }), this._longreadGraded = r.isGraded(), this._chaptersCompletionStatuses = r.getCurrentSectionsStateProgress(), this._introCompleted = r.getIntroSectionStateProgress();
    let o = () => {
      this._longreadResult = r.getLongreadResult(), this._updateUserProgress()
    };
    r.onPersistedStateChange.add(() => this._updatePersistedState()), r.onSectionProgressChange.add(() => {
      let t = r.getCurrentSectionIndex(), n = r.getCurrentSectionProgress(), p = f(this._lmsApi);
      t === -1 && !this._introCompleted && n >= 1 ? (p.setItemViewed(t), this._introCompleted = !0) : t >= 0 && !this._chaptersCompletionStatuses[t] && n >= 1 && (p.setItemViewed(t), this._chaptersCompletionStatuses[t] = !0), o()
    }), r.onLongreadResultChange.add(() => o()), o()
  }

  _createIri() {
    return `ispring://roll/${encodeURIComponent(this._config.contentId)}`
  }

  _closeLms() {
    if (this._closeEventKeys) for (let o of this._closeEventKeys) _(o);
    this._active && (this._active = !1, this._updateDuration(), this._updateUserProgressOnClose()), this._sessionStateNotifier.onSessionEnd.dispatch();
    let r = f(this._lmsApi);
    this._suspendEnabled ? r.suspend() : r.terminate()
  }

  _updateUserProgressOnClose() {
  }

  _updateUserProgress() {
    let r = f(this._lmsApi);
    this._longreadResult && (this._longreadGraded && this._longreadResult.score !== null ? (r.setScore(this._longreadResult.score, 0, 100), r.setStatus(this._longreadResult.longreadPassed, this._longreadResult.completed)) : r.setStatus(null, this._longreadResult.completed), r.setProgress(this._longreadResult.progress / 100), r.commit())
  }

  _updateDuration() {
    let r = Date.now() - this._startTime;
    f(this._lmsApi).setLessonDuration(r)
  }

  _updatePersistedState() {
    this._suspendEnabled && this._playerApi && this._lmsApi && this._lmsApi.setSuspendData(this._playerApi.getSuspendData())
  }
};
var S = class {
  constructor() {
    this._connector = null
  }

  createConnector() {
  }

  getLearnerPreferences() {
    return null
  }

  initialize(r, o) {
    this._connector = this.createConnector(), this._connector ? this._connector.initializeAsync(r, o) : o()
  }

  commit() {
    this._getConnector().commit()
  }

  suspend() {
    this._getConnector().terminate(!0), u()
  }

  terminate() {
    this._getConnector().terminate(!1), u()
  }

  setSuspendData(r) {
    this._getConnector().setSuspendedData(r)
  }

  getSuspendData() {
    return this._getConnector().getSuspendedData()
  }

  setStatus(r, o) {
    this._getConnector().setStatus(r, o)
  }

  setScore(r, o, t, n) {
    let p = t - o > 0 ? r / (t - o) : 0;
    n != null && (r = p * n, t = n), this._getConnector().setScore(r, o, t, p)
  }

  setItemViewed(r) {
  }

  setProgress(r) {
    this._getConnector().setProgress(r)
  }

  setLessonDuration(r) {
    this._getConnector().setSessionTime(r)
  }

  getUserInfo() {
    return this._getConnector().getUserInfo()
  }

  _getConnector() {
    if (!this._connector) throw new Error("Connector not created");
    return this._connector
  }
};
var H = class extends S {
  constructor(r, o) {
    super(), this._reportOptions = r, this._suspendEnabled = o
  }

  createConnector() {
    return new N(this._suspendEnabled)
  }

  setStatus(r, o) {
    this._getConnector().setStatus(r, o)
  }

  suspend() {
    super.suspend(), u()
  }

  terminate() {
    super.terminate(), u()
  }
};
var K = class extends S {
  constructor(r, o = B.SECOND) {
    super(), this._edition = o, this._suspendEnabled = r
  }

  createConnector() {
    return new z(this._edition, this._suspendEnabled)
  }
};

function Vr(e) {
  return {apiVersion: e.apiVersion, flags: e.flags, contentId: e.contentId, edition: e.edition}
}

var L = class e extends d {
  constructor(r) {
    super(r.apiVersion, r), this._scormConfig = r
  }

  static create(r) {
    return new e(Vr(r))
  }

  _createLmsApi(r, o, t) {
    switch (r) {
      case"scorm12":
        return new H(o, t);
      case"scorm2004":
        return new K(t, this._scormConfig.edition)
    }
    throw new Error("unknown api version")
  }
};
er("iSpring.roll.LMS.create", L.create);
d.prototype.initialize = d.prototype.initializeLms;
